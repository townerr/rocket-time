// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    firstname     String?
    lastname      String?
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    managerId     String?
    manager       User?     @relation("ManagerToEmployee", fields: [managerId], references: [id])
    employees     User[]    @relation("ManagerToEmployee")
    isManager     Boolean   @default(false)
    status        String    @default("active") // Can be "active", "inactive", or "terminated"
    accounts      Account[]
    sessions      Session[]
    timesheets    Timesheet[]
    balances      Balance?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Timesheet {
    id        String    @id @default(cuid())
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    weekStart DateTime
    weekEnd   DateTime
    status    String?   // blank or 'pending'
    entries   Entry[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Entry {
    id          String    @id @default(cuid())
    timesheetId String
    timesheet   Timesheet @relation(fields: [timesheetId], references: [id])
    date        DateTime
    type        WorkType  @relation(fields: [workTypeId], references: [id])
    workTypeId  String
    projectCode String?
    hours       Float
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model WorkType {
    id        String    @id @default(cuid())
    name      String
    color     String
    borderColor String  @default("#000000")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    entries   Entry[]
}

model Balance {
    id        String   @id @default(cuid())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id])
    vacation  Float    @default(0)
    sick      Float    @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
